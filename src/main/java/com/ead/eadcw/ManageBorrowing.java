/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ead.eadcw;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Date;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class ManageBorrowing extends javax.swing.JFrame {

    /**
     * Creates new form ManageMember
     */
    public ManageBorrowing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        borrowIDText = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bookIDText = new javax.swing.JTextField();
        memberIDText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        borrowedDateText = new javax.swing.JTextField();
        deleteBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        returnedDateText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rCheckBox = new javax.swing.JCheckBox();

        setTitle("Manage Borrowing");
        setResizable(false);

        jLabel1.setText("BorrowID");

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Book ID");

        jLabel3.setText("Member ID");

        jLabel4.setText("Borrowed Date");

        borrowedDateText.setEditable(false);

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        returnedDateText.setEditable(false);

        jLabel5.setText("Returned Date");

        rCheckBox.setText("Returned");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borrowedDateText)
                    .addComponent(bookIDText)
                    .addComponent(borrowIDText)
                    .addComponent(memberIDText)
                    .addComponent(returnedDateText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 91, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(borrowIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bookIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(updateBtn))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(borrowedDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnedDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(25, 25, 25)
                .addComponent(rCheckBox)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        try {
            int BorrowID = Integer.parseInt(this.borrowIDText.getText());
            try (Connection conn = Eadcw.getConnection()) {
                String sql = "SELECT * FROM BorrowedBooks WHERE BorrowID = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setInt(1, BorrowID);

                    try (ResultSet rs = stmt.executeQuery()) {
                        if (rs.next()) {
                            // Extract details
                            String memberID = rs.getInt("MemberID") + "";
                            String bookID = rs.getInt("BookID") + "";
                            String borrowedDate = rs.getDate("BorrowDate").toString();
                            Date returnedDateObject = rs.getDate("ReturnDate");
                            
                            String returnedDate = null;
                            
                            if (returnedDateObject != null) {
                                returnedDate = returnedDateObject.toString();
                            }

                            this.bookIDText.setText(bookID);
                            this.borrowedDateText.setText(borrowedDate);
                            this.memberIDText.setText(memberID);
                            this.returnedDateText.setText(returnedDate);
                            
                            if (returnedDate != null) {
                                this.rCheckBox.setSelected(true);
                            } else {
                                this.rCheckBox.setSelected(false);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Borrow ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Borrow ID must be an integer.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        try {
            // Retrieve details from text fields
            String bookID = this.bookIDText.getText();
            String memberID = this.memberIDText.getText();

            // Check if any required fields are empty
            if (bookID.isEmpty() || memberID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in all the fields.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try (Connection conn = Eadcw.getConnection()) {
                    // SQL query to insert
                    String sql = "INSERT INTO BorrowedBooks (MemberID, BookID) VALUES (?, ?)";
                    try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                        // Set the values for the prepared statement
                        stmt.setString(1, memberID);
                        stmt.setString(2, bookID);

                        // Execute the insert
                        int rowsAffected = stmt.executeUpdate();
                        if (rowsAffected > 0) {
                            // Retrieve the generated BorrowID
                            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                                if (generatedKeys.next()) {
                                    int borrowID = generatedKeys.getInt(1);
                                    this.borrowIDText.setText(borrowID+ "");
                                    JOptionPane.showMessageDialog(null, "Details added successfully! Borrow ID: " + borrowID, "Success", JOptionPane.INFORMATION_MESSAGE);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Failed to add details.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while adding the member.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try {
            int borrowID = Integer.parseInt(this.borrowIDText.getText());
            // Check if the BorrowID is valid (not zero or negative)
            if (borrowID <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid Borrow ID.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Proceed with deleting the book from the database
            try (Connection conn = Eadcw.getConnection()) {
                // SQL query to delete a book by BorrowID
                String sql = "DELETE FROM BorrowedBooks WHERE BorrowID = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setInt(1, borrowID);

                    // Execute the delete operation
                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Borrowing with ID " + borrowID + " deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "No entry found with the given Borrow ID.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Borrow ID must be an integer.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while deleting the borrowing.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try {
            int borrowID = Integer.parseInt(this.borrowIDText.getText());
            String bookID = this.bookIDText.getText();
            String memberID = this.memberIDText.getText();
            boolean returned = this.rCheckBox.isSelected();
            if (borrowID <= 0) {
                JOptionPane.showMessageDialog(null, "Invalid borrow ID.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate if the required fields are filled
            if (bookID.isEmpty() || memberID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in all the fields.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Proceed with updating the book details in the database
            try (Connection conn = Eadcw.getConnection()) {
                // SQL query to update book details
                String sql = "UPDATE BorrowedBooks SET BookID = ?, MemberID = ?, ReturnDate = ? WHERE BorrowID = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    // Set the values for the prepared statement
                    stmt.setString(1, bookID);
                    stmt.setString(2, memberID);
                    
                    if (returned) {
                        LocalDate cDate = LocalDate.now();
                        Date sqlDate = Date.valueOf(cDate);
                        stmt.setDate(3, sqlDate);
                    } else {
                        stmt.setDate(3, null);
                    }
                                      
                    stmt.setInt(4, borrowID);

                    // Execute the update operation
                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Borrowing details updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "No borrowing found with the given Borrow ID.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Borrowing ID must be an integer.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while updating the borrowing.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField bookIDText;
    private javax.swing.JTextField borrowIDText;
    private javax.swing.JTextField borrowedDateText;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField memberIDText;
    private javax.swing.JCheckBox rCheckBox;
    private javax.swing.JTextField returnedDateText;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
